/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package quanly;

import java.io.IOException;
import java.nio.file.Files;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sourceforge.jtds.jdbc.DateTime;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import org.apache.commons.lang3.math.NumberUtils;

/**
 *
 * @author Admin
 */
public class FormBill extends javax.swing.JFrame {

    private String textString;
    private String SLK;
    Vector MLT=new Vector();
    Vector SLB=new Vector();
    /**
     * Creates new form FormBill
     */
    public FormBill() {
        initComponents();
        //jComboBox2.getEditor().getEditorComponent();
        // change the editor's document to our BadDocument
        AutoCompleteDecorator.decorate(cbbMaSP);
        LoadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtAdess = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtGhichu = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtMaHD = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        dateBill = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        cbbPayment = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        cbbMaSP = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtNameLT = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtSLKho = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        cbbColor = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        cbbROM = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        txtSLMua = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnExportData = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbSP = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Consolas", 3, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 102, 51));
        jLabel1.setText("Hoá Đơn Bán");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin khách hàng"));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Họ tên: ");

        txtName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        txtPhone.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("SDT:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Địa chỉ:");

        txtAdess.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Ghi chú:");

        txtGhichu.setColumns(20);
        txtGhichu.setRows(5);
        jScrollPane1.setViewportView(txtGhichu);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(18, 18, 18)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtAdess, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtAdess, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin hoá đơn"));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Mã hoá đơn: ");

        txtMaHD.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtMaHD.setEnabled(false);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Thời gian:");

        dateBill.setDateFormatString("dd-MM-yyyy HH:mm:ss");
        dateBill.setEnabled(false);
        dateBill.setMinSelectableDate(new java.util.Date(-21487000L));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Thanh toán:");

        cbbPayment.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tiền mặt", "Chuyển khoản", "Khác" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addGap(27, 27, 27)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(13, 13, 13)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbbPayment, 0, 173, Short.MAX_VALUE)
                    .addComponent(txtMaHD)
                    .addComponent(dateBill, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
                .addGap(29, 29, 29))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtMaHD, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(dateBill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cbbPayment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Sản phẩm"));

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Mã SP:");

        cbbMaSP.setEditable(true);
        cbbMaSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbMaSPActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Giá:");

        txtPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtPrice.setEnabled(false);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel11.setText("Tên SP:");

        txtNameLT.setEditable(false);
        txtNameLT.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel12.setText("Kho còn:");

        txtSLKho.setEditable(false);
        txtSLKho.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel13.setText("Màu:");

        cbbColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tièn mặt", "Chuyển khoản", "Khác" }));

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel14.setText("Bộ nhớ:");

        cbbROM.setEnabled(false);

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel15.setText("Số lượng: ");

        txtSLMua.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Chiết khấu 1% ");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbbROM, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel13))
                                .addGap(13, 13, 13)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbbColor, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(cbbMaSP, javax.swing.GroupLayout.Alignment.LEADING, 0, 173, Short.MAX_VALUE)
                                        .addComponent(txtPrice, javax.swing.GroupLayout.Alignment.LEADING)))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel11))
                                .addGap(13, 13, 13)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNameLT, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSLKho, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSLMua, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel16))
                        .addGap(0, 27, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cbbMaSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(cbbColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(cbbROM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtNameLT, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtSLKho, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txtSLMua, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel16)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        btnAdd.setText("Tạo hoá đơn");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Cập nhật");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Xoá SP");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnExportData.setText("Xuất hoá đơn");
        btnExportData.setEnabled(false);
        btnExportData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportDataActionPerformed(evt);
            }
        });

        btnRefresh.setText("Làm mới");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        tbSP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbSPMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tbSP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(55, 55, 55)
                                        .addComponent(btnAdd)
                                        .addGap(28, 28, 28)
                                        .addComponent(btnUpdate)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnDelete)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnExportData)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnRefresh)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(366, 366, 366)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd)
                            .addComponent(btnUpdate)
                            .addComponent(btnDelete)
                            .addComponent(btnExportData)
                            .addComponent(btnRefresh)))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LoadData() {
        try {
            Connection Conn = ConnectDB.getSQLServerConnection();
            Statement st = Conn.createStatement();
            Statement st1 = Conn.createStatement();
            tbSP.removeAll();
            //cbbMaSP.removeAll();
            //cbbColor.removeAll();
            cbbMaSP.removeAllItems();
            //cbbColor.removeAllItems();
            //String sql1 = String.format("SELECT sMaLapTop, sTenLapTop, iGiaBan, sBoNho, sMaMau FROM tbl_ThongTinLaptop");
            String sql1 = String.format("SELECT sMaLapTop FROM tbl_ThongTinLaptop");
            ResultSet rs1 = st1.executeQuery(sql1);
            while (rs1.next()) {
                cbbMaSP.addItem(rs1.getString(1));
            }
//                String sql2 = String.format("SELECT sMaCV, sTenCV FROM tbl_ChucVu");
//                ResultSet rs2 = st1.executeQuery(sql2);
//                while (rs2.next()) {
//                    cbbCV.addItem(rs2.getString(2));
//                }
//          
            //cbbMaSP.setSelectedIndex(-1);
            LocalDateTime myDateObj = LocalDateTime.now();
            DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss");
            String formattedDate = myDateObj.format(myFormatObj);
            java.util.Date date2 = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").parse(formattedDate);
            dateBill.setDate(date2);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void LoadBill(String txt) {
        try {
            Connection Conn = ConnectDB.getSQLServerConnection();
            Statement st = Conn.createStatement();
            String sql = String.format("SELECT dbo.tbl_ThongTinLaptop.sMaLapTop, dbo.tbl_ThongTinLaptop.sTenLaptop, dbo.tbl_ThongTinLaptop.sMaMau, dbo.tbl_ChiTietHoaDon.iSoLuong, dbo.tbl_ThongTinLaptop.iGiaBan, dbo.tbl_ChiTietHoaDon.iChietKhau, dbo.tbl_ChiTietHoaDon.iTongTien\n"
                    + "FROM     dbo.tbl_ChiTietHoaDon INNER JOIN\n"
                    + "                  dbo.tbl_ThongTinLaptop ON dbo.tbl_ChiTietHoaDon.FK_sMaLapTop = dbo.tbl_ThongTinLaptop.sMaLaptop\n"
                    + "WHERE FK_sMaHD=N'%s'", txt);
            ResultSet rs = st.executeQuery(sql);
            DefaultTableModel model = new DefaultTableModel();
            model.setColumnCount(0);
            model.setRowCount(0);
            String[] a = {"STT", "Mã SP", "Tên sản phẩm", "Màu", "Số lượng", "Giá", "Chiết khấu", "Tổng"};
            model.setColumnIdentifiers(a);
            int i = 1;
            while (rs.next()) {
                Vector v = new Vector();
                v.add(i++);
                v.add(rs.getString(1));
                v.add(rs.getString(2));
                v.add(rs.getString(3));
                v.add(rs.getString(4));
                v.add(rs.getString(5));
                v.add(rs.getString(6));
                v.add(rs.getString(7));
                model.addRow(v);
            }
            tbSP.setModel(model);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private boolean CheckData() {
        boolean check = true;
        textString = "";
        if (txtName.getText().length() < 5) {
            check = false;
            textString = "Tên, ";
        }
        String reg = "^(0|\\+84)(\\s|\\.)?((3[2-9])|(5[689])|(7[06-9])|(8[1-689])|(9[0-46-9]))(\\d)(\\s|\\.)?(\\d{3})(\\s|\\.)?(\\d{3})$";

        // Kiem tra dinh dang
        boolean kt = txtPhone.getText().matches(reg);

        if (kt == false) {
            check = false;
            textString += "Số điện thoại, ";
        }
        if (txtAdess.getText().length() < 5) {
            check = false;
            textString += "Quê quán, ";
        }
        if (txtSLMua.getText().equals("") || !(Pattern.matches("^[0-9]+$", txtSLMua.getText()))) {
            check = false;
            textString += "Số lượng mua, ";
        } else {
            if (Integer.parseInt(txtSLMua.getText()) > Integer.parseInt(txtSLKho.getText())) {
                check = false;
                textString += "Số lượng mua không được vượt quá số lượng trong kho ";
            }
            if (Integer.parseInt(txtSLMua.getText()) == 0) {
                check = false;
                textString += "Số lượng mua không được bằng 0";
            }
        }

        return check;
    }

    private void Them(Connection c, Statement s) {
        int a = 0;
        if (txtMaHD.getText().trim().length() < 2) {
            try {
                s = c.createStatement();
                String date = null;
                try {
                    SimpleDateFormat dcn = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    date = dcn.format(dateBill.getDate());
                } catch (Exception e) {
                }
                String sqlString = String.format("INSERT INTO tbl_HoaDon(sTenKH, sSDT, sDiaChi, sGhiChu, dThoiGian, sPTTT) VALUES(N'%s',N'%s',N'%s',N'%s',N'%s',N'%s')", txtName.getText(), txtPhone.getText(), txtAdess.getText(), txtGhichu.getText(), date, cbbPayment.getSelectedItem());
                a = s.executeUpdate(sqlString);
                String sql1 = String.format("select top 1 sMaHD  from tbl_HoaDon order by id desc");
                ResultSet rs1 = s.executeQuery(sql1);
                while (rs1.next()) {
                    txtMaHD.setText(rs1.getString(1));
                }
                double tong = Double.parseDouble(txtSLMua.getText()) * Double.parseDouble(txtPrice.getText()) + (Double.parseDouble(txtPrice.getText()) / 100);
                if ((cbbMaSP.getSelectedIndex() != -1 && txtSLMua.getText().trim().length() > 0) && txtMaHD.getText().length() > 2) {
                    String sqlString1 = String.format("INSERT INTO tbl_ChiTietHoaDon(FK_sMaHD, FK_sMaLapTop, iSoLuong, iChietKhau, iTongTien) VALUES(N'%s',N'%s',N'%s',N'%s','%.0f')", txtMaHD.getText(), cbbMaSP.getSelectedItem(), txtSLMua.getText(), 1, tong);
                    a = s.executeUpdate(sqlString1);
                }
            } catch (Exception e) {
                System.out.println(e);
            }
            System.out.println(a);
            if (a > 0) {
                JOptionPane.showMessageDialog(null, "Tạo hoá đơn thành công", "Thông báo", 1);
                LoadBill(txtMaHD.getText());
            } else {
                JOptionPane.showMessageDialog(null, "Tạo hoá đơn thất bại", "Thông báo", 1);
            }
        } else {
            try {
                s = c.createStatement();
                String sql = String.format("SELECT iSoLuong FROM tbl_ChiTietHoaDon WHERE FK_sMaHD = '%s' AND FK_sMaLapTop = '%s'", txtMaHD.getText(), cbbMaSP.getSelectedItem());
                ResultSet rs = s.executeQuery(sql);
                if (rs.next()==false) {
                    String sqlString1 = String.format("INSERT INTO tbl_ChiTietHoaDon(FK_sMaHD, FK_sMaLapTop, iSoLuong, iChietKhau, iTongTien) VALUES(N'%s',N'%s',N'%s',N'%s','%.0f')", txtMaHD.getText(), cbbMaSP.getSelectedItem(), txtSLMua.getText(), 1, (Double.parseDouble(txtSLMua.getText()) * Double.parseDouble(txtPrice.getText()) + (Double.parseDouble(txtPrice.getText()) / 100)));
                    //System.out.println(sqlString1);
                    a = s.executeUpdate(sqlString1);
                } else {
                    String sqlString1 = String.format("UPDATE tbl_ChiTietHoaDon SET iSoLuong = '%s', iTongTien = '%.0f' WHERE FK_sMaHD = '%s' AND FK_sMaLapTop = N'%s'", txtSLMua.getText(), (Double.parseDouble(txtSLMua.getText()) * Double.parseDouble(txtPrice.getText()) + (Double.parseDouble(txtPrice.getText()) / 100)), txtMaHD.getText(), cbbMaSP.getSelectedItem());
                    //System.out.println(sqlString1);
                    a = s.executeUpdate(sqlString1);
                }

            } catch (Exception e) {
                System.out.println(e);
            }
            System.out.println(a);
            if (a > 0) {
                JOptionPane.showMessageDialog(null, "Thêm sp vào hoá đơn thành công", "Thông báo", 1);
                LoadBill(txtMaHD.getText());
            } else {
                JOptionPane.showMessageDialog(null, "Thêm sp vào hoá đơn thất bại", "Thông báo", 1);
            }
        }
    }
    
     private void Sua(Connection c,Statement s){
        int a=0;
        try {
            s = c.createStatement();
            String sqlString = String.format("UPDATE tbl_HoaDon SET sTenKH = N'%s', sSDT = N'%s', sDiaChi = N'%s', sGhiChu = N'%s', sPTTT = N'%s' WHERE sMaHD='%s'", txtName.getText(), txtPhone.getText(), txtAdess.getText(), txtGhichu.getText(), cbbPayment.getSelectedItem(), txtMaHD.getText());
            a = s.executeUpdate(sqlString);
        } catch (Exception e) {
            System.out.println(e);
        }
        System.out.println(a);
        if(a>0){
            JOptionPane.showMessageDialog(null, "Cập nhật bản ghi thành công","Thông báo", 1);
            LoadBill(txtMaHD.getText());
        }
        else JOptionPane.showMessageDialog(null, "Cập nhật bản ghi thất bại","Thông báo", 1);
    }
     private void Xoa(Connection c,Statement s){
        int a=0;
        try {
            s = c.createStatement();
            String sqlString=String.format("DELETE tbl_ChiTietHoaDon WHERE FK_sMaHD = '%s' AND FK_sMaLapTop = '%s'",txtMaHD.getText(),cbbMaSP.getSelectedItem());
            a= s.executeUpdate(sqlString);
            LoadData();
        } catch (Exception e) {
            System.out.println(e);
        }
        if(a>0){
            JOptionPane.showMessageDialog(null, "Xoá thành công","Thông báo", 1);
            LoadBill(txtMaHD.getText());
        }
        else JOptionPane.showMessageDialog(null, "Xoá thất bại","Thông báo", 1);
    }

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            if (CheckData()) {
                try {
                    Connection c = ConnectDB.getSQLServerConnection();
                    Statement s = c.createStatement();
                    Them(c, s);
                    btnAdd.setText("Thêm SP");
                    btnUpdate.setEnabled(true);
                    btnDelete.setEnabled(true);
                    btnExportData.setEnabled(true);
                    c.close();
                } catch (Exception e) {
                    System.out.println(e);
                }
            } else {
                JOptionPane.showMessageDialog(null, textString + " chưa chính xác!", "Thông báo", 1);
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            //int row = tbSP.getSelectedRow();
            //if (row!=-1) {
                if(CheckData()){
                    try {
                        Connection c = ConnectDB.getSQLServerConnection();
                        Statement s = c.createStatement();
                        Sua(c, s);
                        c.close();
                    } catch (Exception e) {
                        System.out.println(e);
                    }
                }
                else{
                    JOptionPane.showMessageDialog(null, textString+" chưa chính xác!","Thông báo", 1);
                }
//            }
//            else{
//                JOptionPane.showMessageDialog(null, "Chưa chọn bản ghi","Thông báo", 1);
//            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            int row = tbSP.getSelectedRow();
            if (row!=-1) {
                if(JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn muốn xoá sản phẩm có mã: "+cbbMaSP.getSelectedItem(), "Thông báo", JOptionPane.OK_CANCEL_OPTION) == 0){
                    try {
                        Connection c = ConnectDB.getSQLServerConnection();
                        Statement s = c.createStatement();
                        Xoa(c, s);
                        c.close();
                    } catch (Exception e) {
                        System.out.println(e);
                    }
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Chưa chọn bản ghi muốn xoá","Thông báo", 3);
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnExportDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportDataActionPerformed
        
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) tbSP.getModel();
        String date = null;
        try {
            SimpleDateFormat dcn = new SimpleDateFormat("dd/MM/yyyy");
            date = dcn.format(dateBill.getDate());
        } catch (Exception e) {
        }
        long tongtien=0;
        String tmpString = "\n"
                + "\n" + "\n" + "\n"
                + "*********************************************************************************************\n"
                + "\t CỬA HÀNG                                    HÓA ĐƠN THANH TOÁN                 \n"
                + "\t LAPTOP 123                                    Ngày: "+date+" \n"
                + "                                                 Mã hóa đơn: "+txtMaHD.getText()+"\n"
                + "	(DC: Đại học Hạ Long cơ sở 1)                                                           \n"
                + "                                                                                             \n"
                + "---------------------------------------------------------------------------------------------\n"
                + "	Họ tên khách hàng: "+txtName.getText()+"\n"
                + "	Số điện thoại: "+txtPhone.getText()+"\n"
                + "	Địa chỉ: "+txtAdess.getText()+"\n"
                + "	Ghi chú của khách hàng:	"+txtGhichu.getText()+"\n"
                + "			          				\n"
                + "	                               Danh sách sản phẩm mua	   	          	        \n"
                + "**********************************************************************************************\n"
                + " STT" + "\t" + "Tên SP" + "\t" + "Số lượng" + "\t" + "Giá" + "\t" + "% CK" + "\t" + "Tổng" + "\n"
                + "**********************************************************************************************\n";
                int stt=0;
               for (int i = 0; i < model.getRowCount(); i++) {
                    stt += 1;
                    MLT.add(tbSP.getModel().getValueAt(i, 1).toString());
                    String name = tbSP.getModel().getValueAt(i, 2).toString();
                    String sl = tbSP.getModel().getValueAt(i, 4).toString();
                    SLB.add(tbSP.getModel().getValueAt(i, 4).toString());
                    String gia = tbSP.getModel().getValueAt(i, 5).toString();
                    String ck = tbSP.getModel().getValueAt(i, 6).toString();
                    String tong = tbSP.getModel().getValueAt(i, 7).toString();
                    tongtien+=Double.parseDouble(tong);
                    tmpString+=stt+"\t"+name+"\t"+sl+"\t"+gia+"\t"+ck+"\t"+tong+"\n";
               };
                System.out.println(tongtien);
               String tongtienchu=numberToString(tongtien);
               
                tmpString+= "			          				\n"
                + "			          				\n"
                + "**********************************************************************************************\n"
                + "\n"
                + "   Tổng tiền: "+tongtien+"\n"
                + "   Thanh toán: "+tongtien+"\n"
                + "   Hình thức thanh toán: "+cbbPayment.getSelectedItem()+"\n"
                + "   Số tiền viết bằng chữ: ("+tongtienchu+").\n"
                + "\n"
                + "                                ĐÃ THANH TOÁN THÀNH CÔNG\n"
                + "**********************************************************************************************\n"
                + "			          				\n"
                + "      Người mua hàng                                            Người bán hàng		\n"
                + "    (Ký, ghi rõ họ, tên)                                      (Ký, ghi rõ họ, tên)		\n"
                + "\n"
                + "\n"
                + "\n"
                + "\n"
                + "\n"
                + "**********************************************************************************************\n"
                + "                             XIN TRÂN TRONG CẢM ƠN QUÝ KHÁCH!  				\n"
                + "**********************************************************************************************\n";
                for (int i = 0; i < MLT.size(); i++) {
                System.out.println("xxxxxxxxxxx"+MLT.size());
            }
                frmPreviewBill pr = new frmPreviewBill(tmpString);
                pr.MLT=MLT;
                pr.SLB=SLB;
                pr.maString=txtMaHD.getText();
                pr.setVisible(true);
                
        //exportExcel(tbNV);
    }//GEN-LAST:event_btnExportDataActionPerformed
    public static String formatNumberForRead(double number) {
        NumberFormat nf = NumberFormat.getInstance();
        String temp = nf.format(number);
        String strReturn = "";
        int slen = temp.length();
        for (int i = 0; i < slen; i++) {
            if (String.valueOf(temp.charAt(i)).equals("."))
                break;
            else if (Character.isDigit(temp.charAt(i))) {
                strReturn += String.valueOf(temp.charAt(i));
            }
        }
        return strReturn;

    }
    public static String numberToString(double number) {
        String sNumber = formatNumberForRead(number);
        // Tao mot bien tra ve
        String sReturn = "";
        // Tim chieu dai cua chuoi
        int iLen = sNumber.length();
        // Lat nguoc chuoi nay lai
        String sNumber1 = "";
        for (int i = iLen - 1; i >= 0; i--) {
            sNumber1 += sNumber.charAt(i);
        }
        // Tao mot vong lap de doc so
        // Tao mot bien nho vi tri cua sNumber
        int iRe = 0;
        do {
            // Tao mot bien cat tam
            String sCut = "";
            if (iLen > 3) {
                sCut = sNumber1.substring((iRe * 3), (iRe * 3) + 3);
                sReturn = Read(sCut, iRe) + sReturn;
                iRe++;
                iLen -= 3;
            } else {
                sCut = sNumber1.substring((iRe * 3), (iRe * 3) + iLen);
                sReturn = Read(sCut, iRe) + sReturn;
                break;
            }
        } while (true);
        if(sReturn.length() > 1){
            sReturn = sReturn.substring(0,1).toUpperCase() + sReturn.substring(1);
        }
        sReturn = sReturn + "đồng";
        return sReturn;
    }

    // Khoi tao ham Read
    public static String Read(String sNumber, int iPo) {
        // Tao mot bien tra ve
        String sReturn = "";
        // Tao mot bien so
        String sPo[] = { "", "ngàn" + " ",
                "triệu" + " ", "tỷ" + " " };
        String sSo[] = { "không" + " ", "một" + " ",
                "hai" + " ", "ba" + " ",
                "bốn" + " ", "năm" + " ",
                "sáu" + " ", "bảy" + " ",
                "tám" + " ", "chín" + " " };
        String sDonvi[] = { "", "mươi" + " ",
                "trăm" + " " };
        // Tim chieu dai cua chuoi
        int iLen = sNumber.length();
        // Tao mot bien nho vi tri doc
        int iRe = 0;
        // Tao mot vong lap de doc so
        for (int i = 0; i < iLen; i++) {
            String sTemp = "" + sNumber.charAt(i);
            int iTemp = Integer.parseInt(sTemp);
            // Tao mot bien ket qua
            String sRead = "";
            // Kiem tra xem so nhan vao co = 0 hay ko
            if (iTemp == 0) {
                switch (iRe) {
                case 0:
                    break;// Khong lam gi ca
                case 1: {
                    if (Integer.parseInt("" + sNumber.charAt(0)) != 0) {
                        sRead = "lẻ" + " ";
                    }
                    break;
                }
                case 2: {
                    if (Integer.parseInt("" + sNumber.charAt(0)) != 0
                            && Integer.parseInt("" + sNumber.charAt(1)) != 0) {
                        sRead = "không trăm" + " ";
                    }
                    break;
                }
                }
            } else if (iTemp == 1) {
                switch (iRe) {
                case 1:
                    sRead = "mười" + " ";
                    break;
                default:
                    sRead = "một" + " " + sDonvi[iRe];
                    break;
                }
            } else if (iTemp == 5) {
                switch (iRe) {
                case 0: {
                    if(sNumber.length() <= 1){
                        sRead = "năm" + " ";
                    }
                    else if (Integer.parseInt("" + sNumber.charAt(1)) != 0) {
                        sRead = "lăm" + " ";
                    } else
                        sRead = "năm" + " ";
                    break;
                }
                default:
                    sRead = sSo[iTemp] + sDonvi[iRe];
                }
            } else {
                sRead = sSo[iTemp] + sDonvi[iRe];
            }

            sReturn = sRead + sReturn;
            iRe++;
        }
        if (sReturn.length() > 0) {
            sReturn += sPo[iPo];
        }

        return sReturn;
    }

    public static String getRomanNumerals(int Int) {
        LinkedHashMap<String, Integer> roman_numerals = new LinkedHashMap<String, Integer>();
        roman_numerals.put("M", 1000);
        roman_numerals.put("CM", 900);
        roman_numerals.put("D", 500);
        roman_numerals.put("CD", 400);
        roman_numerals.put("C", 100);
        roman_numerals.put("XC", 90);
        roman_numerals.put("L", 50);
        roman_numerals.put("XL", 40);
        roman_numerals.put("X", 10);
        roman_numerals.put("IX", 9);
        roman_numerals.put("V", 5);
        roman_numerals.put("IV", 4);
        roman_numerals.put("I", 1);
        String res = "";
        for(Map.Entry<String, Integer> entry : roman_numerals.entrySet()){
          int matches = Int/entry.getValue();
          res += repeat(entry.getKey(), matches);
          Int = Int % entry.getValue();
        }
        return res;
  }
    public static String repeat(String s, int n) {
    if(s == null) {
        return null;
    }
    final StringBuilder sb = new StringBuilder();
    for(int i = 0; i < n; i++) {
        sb.append(s);
    }
    return sb.toString();
  }
    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        txtName.setText(null);
        txtPhone.setText(null);
        txtMaHD.setText(null);
        tbSP.removeAll();
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnCount(0);
        model.setRowCount(0);
        String[] a = {"STT", "Mã SP","Tên sản phẩm", "Màu", "Số lượng", "Giá", "Chiết khấu", "Tổng"};
        model.setColumnIdentifiers(a);
        tbSP.setModel(model);
        txtAdess.setText(null);
        txtGhichu.setText(null);
        txtSLMua.setText(null);
        cbbPayment.setSelectedIndex(0);
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void cbbMaSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbMaSPActionPerformed

        try {
            Connection Conn = ConnectDB.getSQLServerConnection();
            Statement st = Conn.createStatement();
            Statement st1 = Conn.createStatement();
            String sql1 = String.format("SELECT dbo.tbl_ThongTinLaptop.sTenLaptop, dbo.tbl_ThongTinLaptop.iGiaBan, dbo.tbl_ThongTinLaptop.sBoNho, dbo.tbl_ThongTinLaptop.sMaMau, dbo.tbl_KhoHang.iTonKho\n"
                    + "FROM     dbo.tbl_ThongTinLaptop INNER JOIN\n"
                    + "                  dbo.tbl_KhoHang ON dbo.tbl_ThongTinLaptop.sMaLaptop = dbo.tbl_KhoHang.sMaLaptop WHERE tbl_ThongTinLaptop.sMaLapTop = N'%s'", cbbMaSP.getSelectedItem());
            ResultSet rs1 = st1.executeQuery(sql1);
            cbbROM.removeAllItems();
            cbbColor.removeAllItems();
            while (rs1.next()) {
                txtNameLT.setText(rs1.getString(1));
                txtPrice.setText(rs1.getString(2));
                cbbROM.addItem(rs1.getString(3));
                cbbColor.addItem(rs1.getString(4));
                txtSLKho.setText(rs1.getString(5));
                SLK=rs1.getString(5);
            }
        } catch (Exception e) {
        }

    }//GEN-LAST:event_cbbMaSPActionPerformed

    private void tbSPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbSPMouseClicked
         DefaultTableModel model = (DefaultTableModel)tbSP.getModel();
        int row = tbSP.getSelectedRow();
        //System.out.println(row);
        cbbMaSP.setSelectedItem(tbSP.getModel().getValueAt(row, 1).toString());
        txtNameLT.setText(tbSP.getModel().getValueAt(row, 2).toString());
        cbbColor.setSelectedItem(tbSP.getModel().getValueAt(row, 3).toString());
        txtSLMua.setText(tbSP.getModel().getValueAt(row, 4).toString());
        txtPrice.setText(tbSP.getModel().getValueAt(row, 5).toString());
        txtSLKho.setText(SLK);
    }//GEN-LAST:event_tbSPMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormBill().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExportData;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbbColor;
    private javax.swing.JComboBox<String> cbbMaSP;
    private javax.swing.JComboBox<String> cbbPayment;
    private javax.swing.JComboBox<String> cbbROM;
    private com.toedter.calendar.JDateChooser dateBill;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tbSP;
    private javax.swing.JTextField txtAdess;
    private javax.swing.JTextArea txtGhichu;
    private javax.swing.JTextField txtMaHD;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNameLT;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtSLKho;
    private javax.swing.JTextField txtSLMua;
    // End of variables declaration//GEN-END:variables
}
